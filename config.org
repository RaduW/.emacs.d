#+TITLE: Emacs Configuration
#+AUTHOR: Durant Schoon

While I'm debugging, I'll have emacs automatically open these files:

#+BEGIN_SRC emacs-lisp
  ;; Open these files when in a window (not in the terminal)
  (when window-system
    (setq inhibit-startup-message t)        ; Disable startup message 
    (find-file "/Users/durantschoon/EMACS_BACKUP/init_work.el")
    (linum-mode 1)
    (find-file "/Users/durantschoon/EMACS_BACKUP/.emacs")
    (linum-mode 1)
    (split-window-right)
    (find-file "/Users/durantschoon/.emacs.d/config.org")
    (toggle-truncate-lines t)
    (setq default-frame-alist
          '(
            (width . 177) ; character
            (height . 58) ; lines
            ))
    )
#+END_SRC

* Introduction
** Setup Instructions

   This file was created with boilerplate files described in the video
   [[https://www.youtube.com/watch?v=dyWn30HMgQg&index=7&list=PLqHVwAuIChUK8GE6eDzCQAgP5cJIByQQ5][here]]. If you're just getting started with emacs, you might want to
   start with the first video in the [[https://www.youtube.com/playlist?list=PLqHVwAuIChUK8GE6eDzCQAgP5cJIByQQ5][playlist]].

** Personal Information

  I'm using `concat` so the bots don't find my entire email address
  and spam me. 

#+begin_src emacs-lisp
  (setq user-full-name "Durant Schoon"
        user-mail-address (concat "durant.schoon" "@" "gmail.com"))
#+end_src

** Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Understand
** Key bindings

   [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][Cheatsheet for emacs v24]]

*** Prefixes
    You can see all commands that begin with a prefix by using C-h afterward, 
    e.g `C-x C-h` or `C-c C-h` 

    C-x is for built-in emacs commands
    C-c is for customized (major and minor mode) commands
** Remember these!

   |-------------+---------------------------------|
   | Key Binding | Description                     |
   |-------------+---------------------------------|
   | C-x C-=     | like +, increase font of buffer |
   |-------------+---------------------------------|
   | C-x C-1     | decrease font of buffer         |
   |-------------+---------------------------------|


   To select `org-mode-hook` with your mouse, click on the '-'
   otherwise click on "org" to select only that part.

* Settings
** Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  ;; Remember
  ;; C-x n n 
  ;;   Narrow down to between point and mark (narrow-to-region).
  ;; C-x n w
  ;;   Widen to make the entire buffer accessible again (widen).
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p) ;; "No me rompas las pelotas" cr

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode) ; remove this from the mode-line display

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  ;; (setq visible-bell t)
  ;; because of a bug in El Capitan, setting this to nil
  (setq visible-bell nil)
   
#+end_src
** Package management

   I don't think I need this

   #+BEGIN_SRC emacs-lisp :tangle no
     (let ((default-directory "~/.emacs.d/elpa/"))
       (normal-top-level-add-subdirs-to-load-path))
   #+END_SRC

** Global Key Bindings (Alphabetical by description)
*** Completion

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-/") 'comint-dynamic-complete-filename)
    #+END_SRC

*** Darwin, OS X
    
    ;; key bindings
    ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
    
    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)          ; mac specific settings
        ;; (setq mac-option-modifier 'alt)    ; not needed, I think
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)     ; make opt key do Super
        (setq mac-control-modifier 'control)  ; make Control key do Control
        (setq ns-function-modifier 'hyper)    ; make Fn key do Hyper
        )

      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete

    #+END_SRC

*** occur-dwim

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at "(or emacs"]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
  (defun occur-dwim ()
    "Call `occur' with a sane default."
    (interactive)
    (push (if (region-active-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (let ((sym (thing-at-point 'symbol)))
              (when (stringp sym)
                (regexp-quote sym))))
          regexp-history)
    (call-interactively 'occur))

  (bind-key "M-s o" 'occur-dwim)
#+end_src

*** frames (really windows) and windows (really panes)
    
    #+BEGIN_SRC emacs-lisp
            ;;; windowsandframes.el
            ;;; Commentary:
            ;;; Code:

            ;;; Windows (known as 'frames' in emacs)

            ;;; Code:
      (when (eq system-type 'darwin)          ; mac specific settings
        (global-set-key "\M-`" 'other-frame)  ; act like other mac programs
        )

            ;;; Panes/Frames (known as 'windows' in emacs)

      ;; clearly my intuition for up and down are reversed
      (global-set-key [(meta down)] 'scroll-other-window)    ; C-M-v
      (global-set-key [(meta up)] 'scroll-other-window-down) ; C-M-S-v

      (global-set-key (kbd "C-x 4 o") 'switch-to-buffer-other-window-return)
      (global-set-key (kbd "C-x 4 k") 'kill-buffer-other-window)

      (defun switch-to-buffer-other-window-return ()
        "Like `switch-to-buffer-other-window`, but return to original buffer."
        (interactive)
        (switch-to-buffer-other-window (other-buffer))
        (other-window 1))

      (defun kill-buffer-other-window ()
        "kill the buffer in the other window"
        (interactive)
        (other-window 1)
        (kill-buffer (current-buffer))
        (other-window 1))

        #+END_SRC

*** Function Keys (f1-f4 are defined by emacs f5 on is for user customization)
    
    #+BEGIN_SRC emacs-lisp
      (global-set-key [f5] 'global-whitespace-mode)
      (global-set-key [f6] 'toggle-truncate-lines)
    #+END_SRC

*** web development

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "H-o") 'browse-url-of-buffer)
    #+END_SRC

** Mouse

   #+BEGIN_SRC emacs-lisp
     ;; from the iterm2 FAQ, how to use the mouse in emacs in iterm
     ;; should I make this darwin specific?
     (require 'mouse)
     (xterm-mouse-mode t)
     (defun track-mouse (e) "Make an empty 'track-mouse' function for event E.")
   #+END_SRC

** Programming

   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (linum-mode 1)
       (toggle-truncate-lines t))
     (add-hook 'prog-mode-hook 'my-prog-mode-hook)
   #+END_SRC

** Themes
*** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src
*** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

*** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** Tabs

   When adding a new mode which has its own name for a tab variable,
   add it to the list below. Then changing `tab-width` will change all
   the other values.

   #+BEGIN_SRC emacs-lisp
     (setq tab-width 2)                      ; or any other preferred value
     (let ((tab-variables `(c-basic-offset
                            py-indent-offset
                            sgml-basic-offset
                            css-indent-offset
                            web-mode-code-indent-offset
                            web-mode-markup-indent-offset
                            web-mode-code-indent-offset
                            js-indent-level
                            js2-indent-level
                            coffee-tab-width
                            )))
       (dolist (tab-var tab-variables)
         (defvaralias tab-var 'tab-width)))
   #+END_SRC

** Automatically setting modes

   Most modes seem to recoginze the right file names when loading, but
   these need to be set here.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.aliases\\'" . sh-mode))
     (add-to-list 'auto-mode-alist '("\\.json\\'" . js2-mode))
   #+END_SRC

** Whitespace

   #+BEGIN_SRC emacs-lisp
     ;; automatically clean up bad whitespace
     (setq whitespace-action '(auto-cleanup))
   #+END_SRC

** Zooming DISABLED (does weird things on mac)

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; Zoom in and out
     ;; from: http://blog.vivekhaldar.com/post/4809065853/dotemacs-extract-interactively-change-font-size

     (defun zoom-in ()
       "Increase font size by 10 points."
       (interactive)
       (set-face-attribute 'default nil
                           :height
                           (+ (face-attribute 'default :height)
                              10)))

     (defun zoom-out ()
       "Decrease font size by 10 points."
       (interactive)
       (set-face-attribute 'default nil
                           :height
                           (- (face-attribute 'default :height)
                              10)))

     ;; change font size, interactively
     (global-set-key (kbd "C-.") 'zoom-in)
     (global-set-key (kbd "C-,") 'zoom-out) ; overrides org-cycle-agenda-files
   #+END_SRC

** Babel

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((C . t)
        (css . t)
        (emacs-lisp . t)
        (haskell . t)
        (python . t)
        (ruby . t)
        (sh . t)
        ))
     ;;   (coq . t)
     ;;   (cpp . t) ; C++
     ;;   (prolog . t)   

     (defun my-org-confirm-babel-evaluate (lang body)
       (not (or (string= lang "C")
                (string= lang "emacs-lisp")
                (string= lang "haskell")
                (string= lang "python")
                (string= lang "ruby")
                ;; (string= lang "shell") ;; commented = do confirm
                )))
     (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

   #+END_SRC

** Edit With Emacs

   [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Chrome plugin]]

   Following Daniel here to use Emacs to edit posts on Discourse,
   which has a post editor that overrides normal Emacs key bindings
   with other functions. As such, ~markdown-mode~ is used.
   
   #+begin_src emacs-lisp
     (use-package edit-server
       :ensure t
       :config
       (progn 
         (edit-server-start)
         (setq edit-server-default-major-mode 'markdown-mode)
         (setq edit-server-new-frame nil)))
   #+end_src

* Modes (Alphabetical)
** Ag

   #+begin_src emacs-lisp
     (add-hook 'ag-mode-hook (lambda () (toggle-truncate-lines)))
   #+end_src

** Coffee-mode

   #+begin_src emacs-lisp
     (use-package coffee-mode
       :defer t
       :ensure t
       :config
       (progn
         (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)
         ;; (define-key coffee-mode-map [(meta r)] 'coffee-compile-buffer)
         ;; (define-key coffee-mode-map (kbd "C-j") 'coffee-newline-and-indent))
         ))
   #+end_src
** CSS mode

   #+BEGIN_SRC emacs-lisp
     (add-hook 'css-mode-hook (lambda () (rainbow-mode t)))
   #+END_SRC

** Emmet

   According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."
   
   #+begin_src emacs-lisp
     (use-package emmet-mode
       :ensure t
       :commands emmet-mode
       :config
       (progn
         (add-hook 'html-mode-hook 'emmet-mode)
         (add-hook 'css-mode-hook 'emmet-mode)
         (add-hook 'sass-mode-hook 'emmet-mode)
         (add-hook 'sgml-mode-hook 'emmet-mode))
       )
   #+end_src

** Ediff

   #+BEGIN_SRC emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
     (setq ediff-highlight-all-diffs 'nil)

     ;; rod bogart kicks ass!
     ;; these probably went with an alias
     ;; alias ediff='emacs --eval cmd-ediff'
     ;; usage: ediff FILE1 FILE2
     (defun cmd-ediff ()
       "A command line access to ediff."
       (interactive)
       (let ((buf1 (current-buffer)))
         (other-window 1)
         (ediff-buffers (current-buffer) buf1)))
   #+END_SRC

** Flycheck
   
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (progn
         (setq flycheck-html-tidy-executable
               "/usr/local/Cellar/tidy-html5/5.2.0/bin/tidy")
         (setq flycheck-javascript-jshint-executable
               "/usr/local/bin/jshint")
         (global-flycheck-mode))
       )
   #+end_src

*** Linter setups

    Install the HTML5/CSS/JavaScript linters.

    #+begin_src sh
      pip install pylint
      brew install tidy-html5
      npm install -g jshint
      npm install -g csslint
    #+end_src

** Grep

   #+BEGIN_SRC emacs-lisp
     (add-hook 'grep-mode-hook
               '(lambda ()
                  (toggle-truncate-lines t)))
   #+END_SRC
** HTML
   
   #+BEGIN_SRC emacs-lisp
     (defun my-html-mode-hook ()
       (linum-mode 1)
       (column-number-mode 1)
       (toggle-truncate-lines)
       )
     (add-hook 'html-mode-hook 'my-html-mode-hook)
   #+END_SRC

** Livescript

   #+begin_src emacs-lisp
     (use-package livescript-mode
       :defer t
       :ensure t
       :config
       (add-hook 'livescript-after-compile-hook 'sourcemap-goto-corresponding-point)
       )
   #+end_src

** Ido
   #+begin_src emacs-lisp
     (use-package ido
       :init
       (setq ido-enable-flex-matching t)
       (setq ido-everywhere t)
       (ido-mode t)
       (use-package ido-vertical-mode
         :ensure t
         :defer t
         :init (ido-vertical-mode 1)
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
   #+end_src
** JS2
   #+begin_src emacs-lisp
     (use-package js2-mode
       :defer t
       :ensure t
       :config
       (progn
         (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
         (add-to-list 'auto-mode-alist '("\\.json\\'" . js2-mode))
         (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))
       )
   #+end_src
** Smartscan

   Quickly move to previous and next symbol under the cursor (or replace)

   #+begin_src emacs-lisp
     (use-package smartscan
       :ensure t
       :config (global-smartscan-mode 1)
       :bind (("M-n" . smartscan-symbol-go-forward)
              ("M-p" . smartscan-symbol-go-backward)
              ("M-'" . smartscan-symbol-replace) ; overrides abbrev-prefix-mark
              ))
   #+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

hold out for now :tangle

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :defer t
       :ensure t)
   #+end_src

** Multiple Cursors
   
   For some reason I need to require 'cl. Some of the mc libraries
   require 'cl-lib, but that doesn't seem to be enough. 

   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (require 'cl)
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->"         . mc/mark-next-like-this)
              ("C-<"         . mc/mark-previous-like-this)
              ("C-c C-<"     . mc/mark-all-like-this)
              ("C-!"         . mc/mark-next-symbol-like-this)
              ("s-d"         . mc/mark-all-dwim))
       )
   #+end_src

** Octave

   Decide if I still need this (from [[https://www.gnu.org/software/octave/doc/v4.0.0/Using-Octave-Mode.html][Using Octave Mode]]):

   #+BEGIN_SRC emacs-lisp :tangle no
     (autoload 'octave-mode "octave-mod" nil t)

     (setq auto-mode-alist
           (cons '("\\.m$" . octave-mode) auto-mode-alist))

     (add-hook 'octave-mode-hook
               (lambda ()
                 (abbrev-mode 1)
                 (auto-fill-mode 1)
                 (if (eq window-system 'x)
                     (font-lock-mode 1))))
   #+END_SRC

** Org mode
*** key bindings
    
    #+begin_src emacs-lisp
      (bind-key "C-c l" 'org-store-link)
      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
      (global-set-key "\C-cb" 'org-iswitchb)
    #+end_src

*** Org-bullets
    
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t)
    #+END_SRC

*** Org hide markers
    
    #+BEGIN_SRC emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+END_SRC

*** Hooks

    The clocking expressions are for [[http://orgmode.org/manual/Clocking-work-time.html][clocking work time]].

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda ()
                                 (setq org-clock-persist 'history)
                                 (org-clock-persistence-insinuate)
                                 (org-bullets-mode 1)
                                 (auto-fill-mode 1)
                                 (indent-tabs-mode t)
                                 ))
    #+END_SRC

*** Reference
    - [[http://orgmode.org/manual/Easy-templates.html#Easy-templates][Easy templates]]
*** Todo

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO" "IN_PROGRESS" "|" "DONE")))
    #+END_SRC
** Package

   #+BEGIN_SRC emacs-lisp
     (add-hook 'package-menu-mode-hook (lambda ()
                                         (toggle-truncate-lines t)))
   #+END_SRC
** "Pretty C-l"
   
   Display Control-l characters in a pretty way

   #+begin_src emacs-lisp
     (use-package pp-c-l
       :ensure t
       :config
       (pretty-control-l-mode 1)
       )
   #+end_src

** Python

   Integrates with IPython.
   
   #+begin_src emacs-lisp
     (use-package python-mode
       :defer t
       :ensure t)
   #+end_src

** Projectile
   
   #+BEGIN_QUOTE
   Project navigation and management library for Emacs.
   #+END_QUOTE
 
  http://batsov.com/projectile/
    
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :commands projectile-mode
       :config
       (progn
         (projectile-global-mode t)
         (setq projectile-enable-caching t)
         (use-package ag
           :commands ag
           :ensure t)))
   #+end_src

** Recentf

   Recentf is a minor mode that builds a list of recently opened
   files. This list is is automatically saved across sessions on
   exiting Emacs - you can then access this list through a command or
   the menu.
   
   https://www.emacswiki.org/emacs/RecentFiles

   #+begin_src emacs-lisp
     (use-package recentf
       :bind ("C-x C-r" . helm-recentf)
       :config
       (progn
         (recentf-mode t)
         (setq recentf-max-saved-items 200)))
   #+end_src

** Sass

   #+begin_src emacs-lisp
     (use-package sass-mode
       :defer t
       :ensure t
       :config
       (progn
         (linum-mode 1)
         (rainbow-mode t))
       )
   #+end_src

** Web Mode
  
   #+begin_src emacs-lisp
     (use-package web-mode
       :defer t
       :ensure t
       :config
       (progn
         (local-set-key "\C-cv" 'browse-url-of-file)
         (add-hook 'html-mode-hook 'web-mode)) ;; enable web mode in html
       )
   #+end_src

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :defer t
       :ensure t)
   #+END_SRC
** Yasnippet
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :diminish yas-minor-mode
       :config
       (progn
         (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
         (yas-global-mode)))
   #+end_src

** Zsh

   #+BEGIN_SRC emacs-lisp
     (setq auto-mode-alist
           (cons '("\\.zsh$" . sh-mode) auto-mode-alist))
   #+END_SRC

* Macros
** Org macros
*** "Times" macros in my times.org file :work:

    My simple experiments with tracking work. There's nothing
    really interesting here.

    #+BEGIN_SRC emacs-lisp
      ;; macros for my times.org file (org-mode specific)

      (fset 'times-last
            (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217788 19 42 32 60 19 67108896 19 62 67108896 tab 11 25 tab 18 42 32 60 18 67108896 5 67108896 25] 0 "%d")) arg)))

      (fset 'times-new
            (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217788 19 42 32 84 69 77 80 76 65 84 69 1 67108896 14 14 23 25 25 24 24 67108896 tab 6 6 6 2 11 3 46 return 14 14 5 51 48 19 42 32 60 67108896 16 67108896 backspace backspace backspace backspace 18 42 32 60 67108896 19 105 110 19 67108896 5 67108896] 0 "%d")) arg)))

      (fset 'times-ba
            [?\C-s ?t ?i ?m ?e ?s ?- ?b ?a ?\C-a ?\C-  ?\C-k ?\C-k ?\C-y ?\C-s ?t ?e ?m ?p ?l ?a ?t ?e ?\C-  ?\C-c ?\C-n ?\C-  ?\C-o ?\C-y ?\C-c ?\C-p tab ?\M-f ?\M-b ?\C-k ?\C-c ?. return])
    #+END_SRC

*** TODO md-link-to-org (did I get this working?)

    what about link-to-md-org

    #+BEGIN_SRC emacs-lisp
      (fset 'md-link-to-org
            [?\C-s ?\] ?\( ?\C-  ?\M-z ?\) ?\) ?\C-r ?\[ ?\C-  ?\[ ?\[ ?\C-y backspace ?\] ?\C-s ?\) ?\C-  backspace backspace ?\]])
    #+END_SRC

* Personal Notes about how to modify this file next
** First things I want to do:

   STOPPED_HERE

   - upload to github and ensure sharing works

     - Do I have my yasnippets from work? Are they part of the repo?

   - confirm :config takes one thing afterward so I need (progn ...)
     ask_daniel

   - Get pylint configured with flycheck to ignore the warnings I don't want 
     set up with version control to share with work

   - See: "What to explore next"

** What to explore next 

   Turn on one section at a time where applicable

   - Resolve all tabs issues:

     Need to think about this. Are modes are smart and set the tab
     indent to the one detected in a file? So I only want to force the
     value to 2 in some cases?

     <!-- mode: web; web-mode-markup-indent-offset: 2; -->

   - Does md-link-to-org work? the reverse org-to-md-link?

   - Add code from [[file:/Users/durantschoon/EMACS_BACKUP/init_work.el][work emacs dot files]]

     File done, not do these which I wanted to set up there:

     + install for sure
       + https://github.com/benma/visual-regexp-steroids.el

     + install for sure next
       + projectile
       + multiple-cursors
         Is this still needed?
         We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].   
       + skewer-mode
       + https://github.com/winterTTr/ace-jump-mode
       + http://doc.norang.ca/org-mode.html#Capture

     + install sometime
       + org-to-blog
       + google calendar integration

     + Packages to decide about installing later
       + [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]

   - Add code from [[file/Users/durantschoon/EMACS_BACKUP/.emacs][home emacs dot files]]

     + Packages to decide about installing later
       + mo-git-blame
       + [[https://github.com/magnars/dash.el][Magnar's dash]] (some library I had required it once and there was
         a minor problem)

   - put this with recentf?

     #+BEGIN_SRC emacs-lisp :tangle no
       (defun ido-recentf-open ()
         "Use `ido-completing-read' to \\[find-file] a recent file."
         (interactive)
         (if (find-file (ido-completing-read "Find recent file: " recentf-list))
             (message "Opening file...")
           (message "Aborting")))
     #+END_SRC

   - yasnippets

     Daniel's description:

     Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
     and have also modified them and added my own.

     It takes a few seconds to load and I don't need them immediately when
     Emacs starts up, so we can defer loading yasnippet until there's some
     idle time.

     Also, I should have functions that do debugging: printing the
     value of the variable (symbol?) under the cursor similar to
     macros in ~/.emacs.d/macros/durants_macros.el

   - Add code from daniel's emacs file
     
     TODO go through [[https://github.com/danielmai/.emacs.d/blob/master/config.org#org-mode][daniel mai's org configuration]]
     theme: https://github.com/sjrmanning/darkokai
   
     org and capture

   - Look into babel?

     So much to explore ... http://orgmode.org/worg/org-contrib/babel/

     How about evaluating code from various languages?

   - List by feature the things I want to explore next
     + Sublime-like
       + multiple cursors
       + jumping
       + project navigation
       + completion: 
         + [[https://www.emacswiki.org/emacs/Icicles_-_Ido_and_IswitchB][Ido and IswitchB]] over icicles 
           "You cannot use Icicles and Ido together"

           #+BEGIN_SRC emacs-lisp :tangle no
             (require 'ido)
             (ido-mode t)
           #+END_SRC

         + vs. Helm (replaces Anything.el)
           + HelmSwoop – like occur, but /live/

         + vs.? company mode "COMPlete ANYthing"
           http://company-mode.github.io/
           (add-hook 'after-init-hook 'global-company-mode)

           example from [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][LunarYorn]] (note loads during idle)
           #+BEGIN_SRC emacs-lisp :tangle no
             (use-package company
               :ensure t
               :defer t
               :idle (global-company-mode))
           #+END_SRC

   - Test each of these and see if I like them
     [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen's Sane Defaults]]

   - include notes about which the development packages someone should learn
     in order and why

     + anything-sublime-can-do

     + completions
     + Programming
       + consistent tabs
       + projectile management
       + running an interpretter, debugging

   - flycheck wigging out in elisp source blocks

     Make a yasnippet for these? Someone must have done it. 
     Do I really need these just to make flycheck happy when editing
     in elisp-mode?

     ;;; <name>.el --- <one-line description of the library>
     ;;; Commentary:
     ;;; Change Log: (optional)
     ;;; Code:
     ;;; <name>.el ends here

   - [[https://github.com/magnars/js2-refactor.el][js2-refactor]] A JavaScript refactoring library for emacs

   - Do I need [[http://stackoverflow.com/questions/1568987/getting-emacs-to-respect-my-default-shell-options][this]] to work with zsh in emacs

   - [[https://github.com/abo-abo/hydra][hydra]]
     referenced here: http://oremacs.com/2015/01/26/occur-dwim/

   - edit-server

     config [[https://github.com/jwiegley/use-package][example]]:
     
     #+begin_src emacs-lisp :tangle no
       (use-package edit-server
         :if window-system
         :init
         (add-hook 'after-init-hook 'server-start t)
         (add-hook 'after-init-hook 'edit-server-start t))
     #+end_src

** Need to figure out the best way to do these:

*** Utilities / Clean Recompile

   FIXME

Check if a unix system before running ^gnu ^darwin

Should I try to run all these with elisp?

#+BEGIN_SRC sh :tangle no
  cd ~/.emacs.d
  find . -iname 'org.el*'
  find . -iname 'org.el*' | xargs rm

  ; (byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
#+END_SRC

*** Where to put cheetsheet files

    - personal cheatsheet
      - 

*** Possible to make emacs also install missing programs on OS?

    eg. tidy5 on os x for flycheck

    brew update
    brew install tidy-html5

    Why didn't this link to an executable tidy5?

* Nostalgia
** January 1997
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; ok, my elisp sucks at this stage, but it's a start (1/97)
     ;; durant
     ;; seems to be broken
     (defun comment-block (beg end)
       "Special commenting block for a region. Line of dashes before and after
        as long as the longest line. Strips white space off ends."
       (interactive "r")             ; ? check if already commented
       (let ((max 0)
             (dash 45)               ; 45 is the ascii value of -, "dash"
             (current beg)
             (lmargin "")            ; lmargin can be a space, " ", "> ",...
             (last-line (save-excursion
                          (goto-char end)
                          (string-to-int (substring (what-line) 5)))))
         (progn
           (goto-char current)
           (while (<= current end)
             (beginning-of-line)
             (setq line-begin (point))
             (insert lmargin)
             (end-of-line)
             (delete-horizontal-space)
             (setq len (- (point) line-begin))
             (if (< max len) (setq max len))
             (forward-line)
             (setq current (point))))
         (message "Longest line is: %d chars long." (- max (length lmargin)))
         (goto-char beg)
         (beginning-of-line)
         (setq beg (point))
         (insert-char dash max)        ; insert 'max' dashes at begining
         (insert "\n")
         (setq last-line (+ 2 last-line))    ; add two for lines of dashes
         (goto-line last-line)
         (insert-char dash max)        ; insert 'max' dashes at end
         (insert "\n")
         (comment-region beg (point))))
   #+END_SRC
** ? 
   #+BEGIN_SRC emacs-lisp   
     (defun insert-python-durant-debug-class ()
       "Insert my python debugging class: "
       (interactive)
       (insert "class Debug:\n")
       (insert "    \"\"\"Usage in a method call: \n")
       (insert "\n")
       (insert "    DEBUG.where(self)\n")
       (insert "\n")
       (insert "    \"\"\"\n")
       (insert "    def where(self,instance):\n")
       (insert "        # `instance.__class__` is '<class A at 10f6caa8>'\n")
       (insert "        _class = string.split(`instance.__class__`)[1]\n")
       (insert "        if string.find(_class,'.') > 0:\n")
       (insert "            _class = string.split(_class,'.')[1]\n")
       (insert "        method = traceback.extract_stack()[-2][-2]\n")
       (insert "        print \"DEBUG: In %s.%s\" % (_class,method)\n")
       (insert "\n")
       (insert "DEBUG = Debug()\n")
       (insert "\n"))

     (defun insert-python-durant-debug ()
       "Insert my python debugging string: "
       (interactive)
       (insert "DEBUG.where(self)\n")
       (insert "print '\\t ', "))
   #+END_SRC
