#+TITLE: Emacs Configuration
#+AUTHOR: Durant Schoon

While I'm debugging, I'll have emacs automatically open these files:

#+BEGIN_SRC emacs-lisp
  ;; Open these files when in a window (not in the terminal)
  (when window-system
    (setq inhibit-startup-message t)        ; Disable startup message 
    (find-file "/Users/durantschoon/EMACS_BACKUP/.emacs")
    (find-file "/Users/durantschoon/EMACS_BACKUP/init_work.el")
    (split-window-right)
    (find-file "/Users/durantschoon/.emacs.d/config.org")
    (linum-mode 1)
    (toggle-truncate-lines)
    (setq default-frame-alist
          '(
            (width . 200) ; character
            (height . 58) ; lines
            ))
    )
#+END_SRC

* Introduction
** Setup Instructions

   This file was created with boilerplate files described in the video
   [[https://www.youtube.com/watch?v=dyWn30HMgQg&index=7&list=PLqHVwAuIChUK8GE6eDzCQAgP5cJIByQQ5][here]]. If you're just getting started with emacs, you might want to
   start with the first video in the [[https://www.youtube.com/playlist?list=PLqHVwAuIChUK8GE6eDzCQAgP5cJIByQQ5][playlist]].

** Personal Information

  I'm using `concat` so the bots don't find my entire email address
  and spam me. 

#+begin_src emacs-lisp
  (setq user-full-name "Durant Schoon"
        user-mail-address (concat "durant.schoon" "@" "gmail.com"))
#+end_src

** Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Understand
** Key bindings
*** Prefixes
    You can see all commands that begin with a prefix by using C-h afterward, 
    e.g `C-x C-h` or `C-c C-h` 

    C-x is for built-in emacs commands
    C-c is for customized (major and minor mode) commands

* Settings
** Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode) ; remove this from the mode-line display

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  ;; (setq visible-bell t)
  ;; because of a bug in El Capitan, setting this to nil
  (setq visible-bell nil)
   
#+end_src
** Package management

   I don't think I need this

   #+BEGIN_SRC emacs-lisp :tangle no
     (let ((default-directory "~/.emacs.d/elpa/"))
       (normal-top-level-add-subdirs-to-load-path))
   #+END_SRC

** Global Key Bindings (Alphabetical by description)
*** Completion

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-/") 'comint-dynamic-complete-filename)
    #+END_SRC

*** Darwin, OS X
    
    ;; key bindings
    ;; http://ergoemacs.org/emacs/emacs_hyper_super_keys.html
    
    #+BEGIN_SRC emacs-lisp
      (when (eq system-type 'darwin)          ; mac specific settings
        ;; (setq mac-option-modifier 'alt)    ; not needed, I think
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)     ; make opt key do Super
        (setq mac-control-modifier 'control)  ; make Control key do Control
        (setq ns-function-modifier 'hyper)    ; make Fn key do Hyper
        )

      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete

    #+END_SRC

*** occur-dwim

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at "(or emacs"]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
  (defun occur-dwim ()
    "Call `occur' with a sane default."
    (interactive)
    (push (if (region-active-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (let ((sym (thing-at-point 'symbol)))
              (when (stringp sym)
                (regexp-quote sym))))
          regexp-history)
    (call-interactively 'occur))

  (bind-key "M-s o" 'occur-dwim)
#+end_src

*** frames (really windows) and windows (really panes)
    
    #+BEGIN_SRC emacs-lisp
      ;;; windowsandframes.el --- <one-line description of the library>
      ;;; Commentary:
      ;;; Code:


      ;;; Windows (known as 'frames' in emacs)

      ;;; Code:
      (when (eq system-type 'darwin)          ; mac specific settings
        (global-set-key "\M-`" 'other-frame)  ; act like other mac programs
        )

      ;;; Panes/Frames (known as 'windows' in emacs)


      ;; clearly my intuition for up and down are reversed
      (global-set-key [(meta down)] 'scroll-other-window)    ; C-M-v
      (global-set-key [(meta up)] 'scroll-other-window-down) ; C-M-S-v

      (global-set-key (kbd "C-x 4 o") 'switch-to-buffer-other-window-return)

      (defun switch-to-buffer-other-window-return ()
        "Like `switch-to-buffer-other-window`, but return to original buffer."
        (interactive)
        (switch-to-buffer-other-window (other-buffer))
        (other-window 1))

      ;;; windowsandframes.el ends here

#+END_SRC

*** Function Keys (f1-f4 are defined by emacs f5 on is for user customization)
    
    #+BEGIN_SRC emacs-lisp
      (global-set-key [f5] 'global-whitespace-mode)
      (global-set-key [f6] 'toggle-truncate-lines)
    #+END_SRC

*** web development

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "H-o") 'browse-url-of-buffer)
    #+END_SRC

** Themes
*** Cyberpunk theme

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful. However, I don't like the
boxes around the mode line.

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src
*** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))
#+end_src

*** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Modes (Alphabetical)
** Coffee-mode

   #+begin_src emacs-lisp
     (use-package coffee-mode
       :defer t
       :ensure t)
   #+end_src

** Flycheck
   
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (progn
         (setq flycheck-html-tidy-executable
               "/usr/local/Cellar/tidy-html5/5.2.0/bin/tidy")
         (setq flycheck-javascript-jshint-executable
               "/usr/local/bin/jshint")
         (global-flycheck-mode))
       )
   #+end_src

*** Linter setups

    Install the HTML5/CSS/JavaScript linters.

    #+begin_src sh
      pip install pylint
      brew install tidy-html5
      npm install -g jshint
      npm install -g csslint
    #+end_src

** Smartscan

   Quickly move to previous and next symbol under the cursor (or replace)

   #+begin_src emacs-lisp
     (use-package smartscan
       :ensure t
       :config (global-smartscan-mode 1)
       :bind (("M-n" . smartscan-symbol-go-forward)
              ("M-p" . smartscan-symbol-go-backward)
              ("M-'" . smartscan-symbol-replace) ; overrides abbrev-prefix-mark
              ))
   #+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

hold out for now :tangle

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

** Org mode
*** key bindings
    
    #+begin_src emacs-lisp
      (bind-key "C-c l" 'org-store-link)
      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
    #+end_src

*** Org-bullets
    
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t)
    #+END_SRC

*** Org hide markers
    
    #+BEGIN_SRC emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+END_SRC

*** Hooks

    The clocking expressions are for [[http://orgmode.org/manual/Clocking-work-time.html][clocking work time]].

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda ()
                                 (setq org-clock-persist 'history)
                                 (org-clock-persistence-insinuate)
                                 (org-bullets-mode 1)
                                 (auto-fill-mode 1)
                                 ))
    #+END_SRC

*** Reference

    - [[http://orgmode.org/manual/Easy-templates.html#Easy-templates][Easy templates]]
** Python

   Integrates with IPython.
   
   #+begin_src emacs-lisp
     (use-package python-mode
       :defer t
       :ensure t)
   #+end_src

* Personal Notes about how to modify this file next
** First things I want to do:

   - See: STOPPED_HERE in init_work.el

   - Get pylint configured with flycheck to ignore the warnings I don't want 
     set up with version control to share with work

   - Do I have my yasnippets from work? Are they part of the repo?

   - See: "What to explore next"

** What to explore next 

   Turn on one section at a time where applicable

   - Add

     set in elisp: 

     <!-- mode: web; web-mode-markup-indent-offset: 2; -->

   - Add code from [[file:/Users/durantschoon/EMACS_BACKUP/init_work.el][work emacs dot files]]

     + Packages to decide about installing later
       + [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]
       + https://github.com/winterTTr/ace-jump-mode
       + http://doc.norang.ca/org-mode.html#Capture
       + https://github.com/benma/visual-regexp-steroids.el
       + org-to-blog
       + google calendar integration

   - Add code from [[file/Users/durantschoon/EMACS_BACKUP/.emacs][home emacs dot files]]

     + Packages to decide about installing later
       + mo-git-blame
       + 

   - Add code from daniel's emacs file
     
     TODO go through [[https://github.com/danielmai/.emacs.d/blob/master/config.org#org-mode][daniel mai's org configuration]]
     theme: https://github.com/sjrmanning/darkokai
   
     org and capture

   - List by feature the things I want to explore next
     + Sublime-like
       + multiple cursors
       + jumping
       + project navigation
       + completion: 
         + [[https://www.emacswiki.org/emacs/Icicles_-_Ido_and_IswitchB][Ido and IswitchB]] over icicles 
           "You cannot use Icicles and Ido together"

           #+BEGIN_SRC emacs-lisp :tangle no
             (require 'ido)
             (ido-mode t)
           #+END_SRC

         + vs. Helm (replaces Anything.el)
           + HelmSwoop – like occur, but /live/

   - Test each of these and see if I like them
     [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen's Sane Defaults]]

   - include notes about which the packages someone should learn
     in order and why

   - Make a yasnippet for these? Someone must have done it. 
     Do I really need these just to make flycheck happy when editing
     in elisp-mode?

;;; <name>.el --- <one-line description of the library>
;;; Commentary:
;;; Change Log: (optional)
;;; Code:
;;; <name>.el ends here

   - kill other buffer? 

     see useful things for killing buffers

     https://www.emacswiki.org/emacs/KillingBuffers

   - Do I need [[http://stackoverflow.com/questions/1568987/getting-emacs-to-respect-my-default-shell-options][this]] to work with zsh in emacs

   - [[https://github.com/abo-abo/hydra][hydra]]
     referenced here: http://oremacs.com/2015/01/26/occur-dwim/

   - edit-server

     config [[https://github.com/jwiegley/use-package][example]]:
     
     #+begin_src emacs-lisp :tangle no
       (use-package edit-server
         :if window-system
         :init
         (add-hook 'after-init-hook 'server-start t)
         (add-hook 'after-init-hook 'edit-server-start t))
     #+end_src

** Need to figure out the best way to do these:

*** Utilities / Clean Recompile

   FIXME

Check if a unix system before running ^gnu ^darwin

Should I try to run all these with elisp?

#+BEGIN_SRC sh
  cd ~/.emacs.d
  find . -iname 'org.el*'
  find . -iname 'org.el*' | xargs rm

  ; (byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
#+END_SRC

*** Where to put cheetsheet files

    - personal cheatsheet
      - C-x C-h for C-x commands (for global Commands)
      - C-x r C-h for "C-x r" commands
      - C-c C-h for C-c commands (for mode specific "C"ommands)

*** Possible to make emacs also install missing programs on OS?

    eg. tidy5 on os x for flycheck

    brew update
    brew install tidy-html5

    Why didn't this link to an executable tidy5?
